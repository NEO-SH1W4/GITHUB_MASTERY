#!/usr/bin/env node

/**
 * Script para verificar o status do MCP
 */

import { createLogger } from './utils/logger.js';
import fs from 'fs';
import { exec } from 'child_process';
import { promisify } from 'util';

const execPromise = promisify(exec);
const logger = createLogger('mcp-check');

async function checkMCP() {
  try {
    logger.info('üîç Verificando status do MCP...');
    
    // Verificar configura√ß√£o
    logger.info('üìÑ Verificando arquivo de configura√ß√£o...');
    if (fs.existsSync('mcp-config.json')) {
      const mcpConfig = JSON.parse(fs.readFileSync('mcp-config.json', 'utf8'));
      logger.info(`‚úÖ Configura√ß√£o MCP - OK (${Object.keys(mcpConfig.mcpServers || {}).length} servidores definidos)`);
      
      // Listar servidores configurados
      if (mcpConfig.mcpServers) {
        for (const serverName of Object.keys(mcpConfig.mcpServers)) {
          const server = mcpConfig.mcpServers[serverName];
          const enabled = server.enabled !== false;
          if (enabled) {
            logger.info(`üì° Servidor: ${serverName} - ATIVO`);
          } else {
            logger.warn(`üì° Servidor: ${serverName} - DESATIVADO`);
          }
        }
      }
    } else {
      logger.error('‚ùå Configura√ß√£o MCP - N√ÉO ENCONTRADA');
    }
    
    // Verificar processos Node.js em execu√ß√£o
    logger.info('üîÑ Verificando processos Node.js...');
    try {
      const { stdout } = await execPromise('tasklist /FI "IMAGENAME eq node.exe" /FO CSV');
      const lines = stdout.trim().split('\n');
      
      if (lines.length > 1) {
        logger.info(`‚úÖ Processos Node.js - OK (${lines.length - 1} processos em execu√ß√£o)`);
      } else {
        logger.warn('‚ö†Ô∏è Processos Node.js - NENHUM EM EXECU√á√ÉO');
        logger.info('üí° Execute o script restart.ps1 para iniciar o servidor MCP');
      }
    } catch (error) {
      logger.error(`‚ùå Erro ao verificar processos: ${error.message}`);
    }
    
    // Verificar status do VIREON
    logger.info('üß† Verificando integra√ß√£o VIREON...');
    if (fs.existsSync('mcp-config.json')) {
      const mcpConfig = JSON.parse(fs.readFileSync('mcp-config.json', 'utf8'));
      if (mcpConfig.vireonIntegration && mcpConfig.vireonIntegration.enabled) {
        logger.info('‚úÖ Integra√ß√£o VIREON - ATIVA');
        logger.info(`üìä N√≠vel de consci√™ncia: ${mcpConfig.vireonIntegration.consciousnessLevel || 'basic'}`);
      } else {
        logger.warn('‚ö†Ô∏è Integra√ß√£o VIREON - DESATIVADA');
      }
    }
    
    // Verificar status do GIDEN
    logger.info('ü§ñ Verificando integra√ß√£o GIDEN...');
    if (fs.existsSync('mcp-config.json')) {
      const mcpConfig = JSON.parse(fs.readFileSync('mcp-config.json', 'utf8'));
      if (mcpConfig.gidenIntegration && mcpConfig.gidenIntegration.enabled) {
        logger.info('‚úÖ Integra√ß√£o GIDEN - ATIVA');
        
        // Verificar pasta do projeto AIDEN
        const aidenPath = mcpConfig.gidenIntegration.aidenProjectPath;
        if (aidenPath && fs.existsSync(aidenPath)) {
          logger.info(`‚úÖ Caminho AIDEN - V√ÅLIDO (${aidenPath})`);
        } else {
          logger.warn(`‚ö†Ô∏è Caminho AIDEN - INV√ÅLIDO (${aidenPath || 'n√£o definido'})`);
        }
      } else {
        logger.warn('‚ö†Ô∏è Integra√ß√£o GIDEN - DESATIVADA');
      }
    }
    
    logger.info('‚úÖ Verifica√ß√£o conclu√≠da!');
    
  } catch (error) {
    logger.error(`‚ùå Erro na verifica√ß√£o: ${error.message}`);
    process.exit(1);
  }
}

// Executar verifica√ß√£o
checkMCP();
