#!/usr/bin/env pwsh

<#
.SYNOPSIS
    Inicia o servidor MCP consolidado do GitHub Mastery
.DESCRIPTION
    Este script configura o ambiente e inicia o servidor MCP consolidado
    com integra√ß√£o VIREON e todas as capacidades do agente.
.PARAMETER Token
    Token do GitHub para autentica√ß√£o (opcional, usa vari√°vel de ambiente se n√£o fornecido)
.PARAMETER Debug
    Ativa modo debug com logs detalhados
.EXAMPLE
    .\start-mcp-server.ps1
.EXAMPLE
    .\start-mcp-server.ps1 -Token "ghp_xxxxx" -Debug
#>

param(
    [string]$Token = $env:GITHUB_TOKEN,
    [switch]$Debug
)

Write-Host "üöÄ GitHub Mastery MCP Consolidated Server Launcher" -ForegroundColor Cyan
Write-Host "=================================================" -ForegroundColor Cyan

# Verificar se estamos no diret√≥rio correto
$projectRoot = Split-Path -Parent $PSScriptRoot
if (-not (Test-Path "$projectRoot\mcp\consolidated-mcp-server.js")) {
    Write-Host "‚ùå Erro: Servidor MCP n√£o encontrado. Certifique-se de estar no diret√≥rio do projeto." -ForegroundColor Red
    exit 1
}

# Configurar vari√°veis de ambiente
Write-Host "`nüìã Configurando ambiente..." -ForegroundColor Yellow

# GitHub Token
if ([string]::IsNullOrEmpty($Token)) {
    Write-Host "‚ö†Ô∏è  Token GitHub n√£o fornecido. Tentando usar vari√°vel de ambiente..." -ForegroundColor Yellow
    if ([string]::IsNullOrEmpty($env:GITHUB_TOKEN)) {
        Write-Host "‚ùå Erro: GITHUB_TOKEN n√£o configurado. Use -Token ou configure a vari√°vel de ambiente." -ForegroundColor Red
        Write-Host "   Exemplo: `$env:GITHUB_TOKEN='seu-token-aqui'" -ForegroundColor Gray
        exit 1
    }
} else {
    $env:GITHUB_TOKEN = $Token
    Write-Host "‚úÖ Token GitHub configurado" -ForegroundColor Green
}

# Configura√ß√µes VIREON
$env:VIREON_INTEGRATION = "true"
$env:RUST_AGENT_CORE = "true"
$env:PYTHON_AGENT_BRAIN = "true"
$env:MCP_SERVER_NAME = "github-mastery-consolidated"
$env:MCP_SERVER_VERSION = "2.0.0"

# Modo Debug
if ($Debug) {
    $env:DEBUG = "mcp:*"
    $env:LOG_LEVEL = "debug"
    Write-Host "üêõ Modo debug ativado" -ForegroundColor Magenta
}

# Mostrar configura√ß√£o
Write-Host "`nüìä Configura√ß√£o do Servidor:" -ForegroundColor Cyan
Write-Host "   Nome: $env:MCP_SERVER_NAME" -ForegroundColor Gray
Write-Host "   Vers√£o: $env:MCP_SERVER_VERSION" -ForegroundColor Gray
Write-Host "   VIREON: $env:VIREON_INTEGRATION" -ForegroundColor Gray
Write-Host "   Rust Core: $env:RUST_AGENT_CORE" -ForegroundColor Gray
Write-Host "   Python Brain: $env:PYTHON_AGENT_BRAIN" -ForegroundColor Gray

# Verificar depend√™ncias
Write-Host "`nüîç Verificando depend√™ncias..." -ForegroundColor Yellow

# Node.js
$nodeVersion = node --version 2>$null
if ($LASTEXITCODE -ne 0) {
    Write-Host "‚ùå Node.js n√£o encontrado. Instale o Node.js 18+ para continuar." -ForegroundColor Red
    exit 1
}
Write-Host "‚úÖ Node.js $nodeVersion" -ForegroundColor Green

# Verificar se as depend√™ncias npm est√£o instaladas
if (-not (Test-Path "$projectRoot\node_modules")) {
    Write-Host "üì¶ Instalando depend√™ncias npm..." -ForegroundColor Yellow
    Push-Location $projectRoot
    npm install
    Pop-Location
}

# Verificar Agent Core (Rust) - opcional
$cargoVersion = cargo --version 2>$null
if ($LASTEXITCODE -eq 0) {
    Write-Host "‚úÖ Rust/Cargo encontrado: $cargoVersion" -ForegroundColor Green
    
    # Verificar se o Agent Core est√° compilado
    if (Test-Path "$projectRoot\github-agent-core\target\release") {
        Write-Host "‚úÖ Agent Core (Rust) compilado" -ForegroundColor Green
    } else {
        Write-Host "‚ö†Ô∏è  Agent Core n√£o compilado. Compile com: cd github-agent-core && cargo build --release" -ForegroundColor Yellow
    }
} else {
    Write-Host "‚ö†Ô∏è  Rust n√£o encontrado. Agent Core funcionar√° em modo simulado." -ForegroundColor Yellow
}

# Verificar Python - opcional
$pythonVersion = python --version 2>$null
if ($LASTEXITCODE -eq 0) {
    Write-Host "‚úÖ Python encontrado: $pythonVersion" -ForegroundColor Green
    
    # Verificar se o ambiente virtual existe
    if (Test-Path "$projectRoot\github-agent-brain\venv") {
        Write-Host "‚úÖ Agent Brain (Python) ambiente virtual configurado" -ForegroundColor Green
    } else {
        Write-Host "‚ö†Ô∏è  Ambiente Python n√£o configurado. Configure com: cd github-agent-brain && python -m venv venv" -ForegroundColor Yellow
    }
} else {
    Write-Host "‚ö†Ô∏è  Python n√£o encontrado. Agent Brain funcionar√° em modo simulado." -ForegroundColor Yellow
}

# Criar diret√≥rio de logs se n√£o existir
$logsDir = "$projectRoot\logs\mcp"
if (-not (Test-Path $logsDir)) {
    New-Item -ItemType Directory -Path $logsDir -Force | Out-Null
    Write-Host "üìÅ Diret√≥rio de logs criado: $logsDir" -ForegroundColor Gray
}

# Iniciar o servidor
Write-Host "`nüöÄ Iniciando servidor MCP consolidado..." -ForegroundColor Green
Write-Host "   Pressione Ctrl+C para parar o servidor" -ForegroundColor Gray
Write-Host "=" * 50 -ForegroundColor Green

# Mudar para o diret√≥rio do projeto
Push-Location $projectRoot

try {
    # Executar o servidor
    if ($Debug) {
        # Em modo debug, mostrar todos os logs
        node "mcp\consolidated-mcp-server.js" 2>&1 | Tee-Object -FilePath "$logsDir\server-$(Get-Date -Format 'yyyyMMdd-HHmmss').log"
    } else {
        # Modo normal
        node "mcp\consolidated-mcp-server.js"
    }
} catch {
    Write-Host "`n‚ùå Erro ao executar o servidor: $_" -ForegroundColor Red
} finally {
    Pop-Location
    Write-Host "`nüëã Servidor MCP finalizado" -ForegroundColor Yellow
}
