{
  "integration": {
    "name": "github-mastery",
    "version": "1.0.0",
    "description": "GitHub Mastery MCP Server Integration",
    "type": "mcp-server",
    "ecosystem_version": "0.1.0"
  },
  "server": {
    "name": "github-mastery",
    "description": "Advanced GitHub API integration for MCP ecosystem",
    "path": "./mcp/github-mcp-server.js",
    "protocol": "stdio",
    "capabilities": {
      "tools": true,
      "resources": true,
      "prompts": false,
      "sampling": false
    },
    "environment": {
      "GITHUB_TOKEN": "${GITHUB_TOKEN}",
      "MCP_SERVER_NAME": "github-mastery",
      "MCP_SERVER_VERSION": "1.0.0",
      "NODE_ENV": "production"
    }
  },
  "tools": [
    {
      "name": "github_authenticate",
      "description": "Authenticate with GitHub and get user information",
      "category": "authentication",
      "schema": {
        "type": "object",
        "properties": {},
        "required": []
      }
    },
    {
      "name": "github_list_repos",
      "description": "List GitHub repositories for the authenticated user",
      "category": "repository",
      "schema": {
        "type": "object",
        "properties": {
          "limit": {
            "type": "number",
            "description": "Maximum number of repositories to return",
            "default": 30
          },
          "sort": {
            "type": "string",
            "enum": ["created", "updated", "pushed", "full_name"],
            "description": "Sort order for repositories",
            "default": "updated"
          },
          "direction": {
            "type": "string",
            "enum": ["asc", "desc"],
            "description": "Sort direction",
            "default": "desc"
          }
        },
        "required": []
      }
    },
    {
      "name": "github_get_repo",
      "description": "Get detailed information about a specific repository",
      "category": "repository",
      "schema": {
        "type": "object",
        "properties": {
          "owner": {
            "type": "string",
            "description": "Repository owner (username or organization)"
          },
          "repo": {
            "type": "string",
            "description": "Repository name"
          }
        },
        "required": ["owner", "repo"]
      }
    },
    {
      "name": "github_list_issues",
      "description": "List issues for a specific repository",
      "category": "issues",
      "schema": {
        "type": "object",
        "properties": {
          "owner": {
            "type": "string",
            "description": "Repository owner"
          },
          "repo": {
            "type": "string",
            "description": "Repository name"
          },
          "state": {
            "type": "string",
            "enum": ["open", "closed", "all"],
            "description": "Issue state filter",
            "default": "open"
          },
          "limit": {
            "type": "number",
            "description": "Maximum number of issues to return",
            "default": 30
          }
        },
        "required": ["owner", "repo"]
      }
    },
    {
      "name": "github_create_repo",
      "description": "Create a new GitHub repository",
      "category": "repository",
      "schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Repository name"
          },
          "description": {
            "type": "string",
            "description": "Repository description"
          },
          "private": {
            "type": "boolean",
            "description": "Whether the repository is private",
            "default": false
          },
          "auto_init": {
            "type": "boolean",
            "description": "Initialize with README",
            "default": true
          },
          "license_template": {
            "type": "string",
            "description": "License template to use"
          }
        },
        "required": ["name"]
      }
    },
    {
      "name": "github_rate_limit",
      "description": "Check current GitHub API rate limit status",
      "category": "monitoring",
      "schema": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  ],
  "resources": [
    {
      "uri": "github://user/profile",
      "name": "User Profile",
      "description": "Authenticated GitHub user profile information",
      "mimeType": "application/json"
    },
    {
      "uri": "github://repositories/list",
      "name": "Repository List",
      "description": "List of user repositories with metadata",
      "mimeType": "application/json"
    },
    {
      "uri": "github://repo/{owner}/{repo}",
      "name": "Repository Details",
      "description": "Detailed information about a specific repository",
      "mimeType": "application/json"
    },
    {
      "uri": "github://repo/{owner}/{repo}/issues",
      "name": "Repository Issues",
      "description": "Issues for a specific repository",
      "mimeType": "application/json"
    }
  ],
  "security": {
    "required_tokens": ["GITHUB_TOKEN"],
    "permissions": [
      "repo",
      "read:user",
      "read:org"
    ],
    "rate_limiting": {
      "enabled": true,
      "max_requests_per_hour": 5000,
      "burst_limit": 100
    }
  },
  "monitoring": {
    "metrics": [
      "requests_total",
      "requests_duration",
      "rate_limit_remaining",
      "authentication_status"
    ],
    "health_check": {
      "endpoint": "/health",
      "interval": 30000
    }
  },
  "dependencies": {
    "ecosystem": {
      "rules_engine": "^1.0.0",
      "server_framework": "^1.0.0",
      "sage_integration": "^1.0.0"
    },
    "external": {
      "@octokit/rest": "^20.0.0",
      "@modelcontextprotocol/sdk": "^0.5.0"
    }
  },
  "integration_points": {
    "rules_engine": {
      "enabled": true,
      "rules": [
        "github-rate-limiting",
        "github-security-validation",
        "github-data-sanitization"
      ]
    },
    "sage_integration": {
      "enabled": true,
      "context_sharing": true,
      "rule_synchronization": true
    },
    "orchestrator": {
      "enabled": true,
      "load_balancing": false,
      "failover": true
    }
  },
  "deployment": {
    "mode": "standalone",
    "auto_start": true,
    "restart_policy": "on-failure",
    "health_check_timeout": 10000,
    "startup_timeout": 30000
  }
}

